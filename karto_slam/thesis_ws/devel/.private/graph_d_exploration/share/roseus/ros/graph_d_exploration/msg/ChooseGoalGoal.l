;; Auto-generated. Do not edit!


(when (boundp 'graph_d_exploration::ChooseGoalGoal)
  (if (not (find-package "GRAPH_D_EXPLORATION"))
    (make-package "GRAPH_D_EXPLORATION"))
  (shadow 'ChooseGoalGoal (find-package "GRAPH_D_EXPLORATION")))
(unless (find-package "GRAPH_D_EXPLORATION::CHOOSEGOALGOAL")
  (make-package "GRAPH_D_EXPLORATION::CHOOSEGOALGOAL"))

(in-package "ROS")
;;//! \htmlinclude ChooseGoalGoal.msg.html


(defclass graph_d_exploration::ChooseGoalGoal
  :super ros::object
  :slots (_client_id _matrix _rows ))

(defmethod graph_d_exploration::ChooseGoalGoal
  (:init
   (&key
    ((:client_id __client_id) "")
    ((:matrix __matrix) (instance graph_d_exploration::InfoMatrix :init))
    ((:rows __rows) (make-array 0 :initial-element 0 :element-type :integer))
    )
   (send-super :init)
   (setq _client_id (string __client_id))
   (setq _matrix __matrix)
   (setq _rows __rows)
   self)
  (:client_id
   (&optional __client_id)
   (if __client_id (setq _client_id __client_id)) _client_id)
  (:matrix
   (&rest __matrix)
   (if (keywordp (car __matrix))
       (send* _matrix __matrix)
     (progn
       (if __matrix (setq _matrix (car __matrix)))
       _matrix)))
  (:rows
   (&optional __rows)
   (if __rows (setq _rows __rows)) _rows)
  (:serialization-length
   ()
   (+
    ;; string _client_id
    4 (length _client_id)
    ;; graph_d_exploration/InfoMatrix _matrix
    (send _matrix :serialization-length)
    ;; int8[] _rows
    (* 1    (length _rows)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _client_id
       (write-long (length _client_id) s) (princ _client_id s)
     ;; graph_d_exploration/InfoMatrix _matrix
       (send _matrix :serialize s)
     ;; int8[] _rows
     (write-long (length _rows) s)
     (dotimes (i (length _rows))
       (write-byte (elt _rows i) s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _client_id
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _client_id (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; graph_d_exploration/InfoMatrix _matrix
     (send _matrix :deserialize buf ptr-) (incf ptr- (send _matrix :serialization-length))
   ;; int8[] _rows
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _rows (instantiate integer-vector n))
     (dotimes (i n)
     (setf (elt _rows i) (sys::peek buf ptr- :char)) (incf ptr- 1)
     (if (> (elt _rows i) 127) (setf (elt _rows i) (- (elt _rows i) 256)))
     ))
   ;;
   self)
  )

(setf (get graph_d_exploration::ChooseGoalGoal :md5sum-) "ccc4eb8941602a0039260071e46f98e1")
(setf (get graph_d_exploration::ChooseGoalGoal :datatype-) "graph_d_exploration/ChooseGoalGoal")
(setf (get graph_d_exploration::ChooseGoalGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Action definition for choosing centroids
# The goal specifies the client id and the matrix with the lists in which each element is of the form [Reward, X, Y]
# The action server should try to choose the centroid that maximizes the information gain depending on the priority
# of the robots (r0 > ... > rn)

# Goal definition
string client_id
InfoMatrix matrix
int8[] rows

================================================================================
MSG: graph_d_exploration/InfoMatrix
# Matrix of type [Reward, X, Y] with dimensions [nx3]
uint32 rows
float32[] data
")



(provide :graph_d_exploration/ChooseGoalGoal "ccc4eb8941602a0039260071e46f98e1")


